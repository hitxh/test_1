# -*- coding:utf-8 -*-"
def mix(s1, s2):
        # your code
    # use dict
    lowercase = 'abcdefghijklmnopqrstuvwxyz'
    s1_dict = {}
    s2_dict = {}
    for i in lowercase:
        if s1.count(i) > 1:
            s1_dict[i] = s1.count(i)
        if s2.count(i) > 1:
            s2_dict[i] = s2.count(i)
    if len(s1_dict) == 0 and len(s2_dict) == 0:
        return ''
    print(s1_dict)
    print(s2_dict)
    if len(s1_dict.values()) == 0:
        s1_dict_values_max = 1
    else:
        s1_dict_values_max =max(s1_dict.values())
    if len(s2_dict.values()) == 0:
        s2_dict_values_max = 1
    else:
        s2_dict_values_max = max(s2_dict.values())
    max_value = max(s1_dict_values_max, s2_dict_values_max)
    # delete useless information
    intersection =dict.fromkeys(x for x in s1_dict if x in s2_dict)   # dict intersection
    key_value_dict ={}
    for x in intersection:
        if s1_dict[x] > s2_dict[x]:
            del(s2_dict[x])
        elif s1_dict[x] == s2_dict[x]:
            key_value_dict[x] = s1_dict[x]
            del (s1_dict[x])
            del (s2_dict[x])
        else:
            del(s1_dict[x])
    print(s1_dict)
    print(s2_dict)
    print(key_value_dict)

    s1_dict['X'] = 1
    s2_dict['Y'] = 1
    key_value_dict['Z'] = 1
    #     print(s1_dict.values())
    print('over manage')
    # second sort
    s1_new = sorted(s1_dict.items(), key=lambda item:(item[1], -ord(item[0])), reverse=True)
    s2_new = sorted(s2_dict.items(), key=lambda item:(item[1], -ord(item[0])), reverse=True)
    key_value_new = sorted(key_value_dict.items(), key=lambda item: (item[1], -ord(item[0])), reverse=True)

    print(s1_new)
    print(s2_new)
    print(key_value_new)

    output = []
    i = max_value
    while i >= 2:
        print(i)
        print(s1_new)
        print(s2_new)
        if s1_new[0][1] == i or s2_new[0][1] == i:
            if s1_new[0] == s2_new[0]:
                output.append('=:%s' % (s1_new[0][0] * i))
                del (s1_new[0])
                del (s2_new[0])
            elif s1_new[0][0] == s2_new[0][0]:
                if s1_new[0][1] > s2_new[0][1]:
                    print('sdf')
                    output.append('1:%s' % (s1_new[0][0] * i))
                    del (s1_new[0])
                    del (s2_new[0])
                else:
                    output.append('2:%s' % (s1_new[0][0] * i))
                    del (s1_new[0])
                    del (s2_new[0])
            else:
                if s1_new[0][1] > s2_new[0][1]:
                    output.append('1:%s' % (s1_new[0][0] * i))
                    del (s1_new[0])
                elif s1_new[0][1] == s2_new[0][1]:
                    output.append('1:%s' % (s1_new[0][0] * i))
                    del (s1_new[0])
                else:
                    output.append('2:%s' % (s2_new[0][0] * i))
                    del (s2_new[0])
        else:
            while key_value_new[0][1] == i:
                output.append('=:%s' % (key_value_new[0][0] * i))
                del(key_value_new[0])
            i = i-1
        print(output)
    output = '/'.join(output)
    print(output)
    return output

s1 = "ee ll oo"
s2 = "t&"
mix(s1, s2)
# mix("looping is fun but dangerous", "less dangerous than coding")